\\\ Base point computation for Sonny Curve.

sage: prime = 2^252 + 27742317777372353535851937790883648493

sage: A = 505186

sage:  def findBasepoint(prime, A):
F = GF(prime)
E = EllipticCurve(F, [0, A, 0, 1, 0])
for uInt in range(1, 1e3):
u = F(uInt)
v2 = u^3 + A*u^2 + u
if not v2.is_square():
v = v2.sqrt()
point = E(u, v)
pointOrder = point.order()
if pointOrder > 8 and pointOrder.is_prime():
Q=u^3 + A*u^2 + u
return u, Q, sqrt(Q), point

sage: res = findBasepoint(prime, A)

sage: res

(4,
 8083044,
 2387694734969974503585694617203302024142786955946516383730480941479078023877,
 
  (4 : 2387694734969974503585694617203302024142786955946516383730480941479078023877 : 1)

/// Computation of Edwards points in Twisted Edwards format to produce (X:Y:T:Z) from given a X value.
/// Using a manipulated version of the Edwards equation,
/// written below, allows for the computation.
/// a*X^2+Y^2 = 1+d*X^2*Y^2
/// a = -1, d = -126296/126297
/// In fractions in the mod l need to be `inverse_mod`, calculated for d as below:

sage: p = 2^252 + 27742317777372353535851937790883648493
sage: d = -(126296)/(126297)
sage: d = ((-126296)*inverse_mod(126297,p))%p
sage: d
951605751702391019481481818669129158712512026257330939079110344917983315091

/// For use in the equation Y^2 will be written as Y, as sage will attempt to compute the square root.
/// For arbitrarlily chosen X = 14

sage: X = 14
sage: Y = (-(X)^2-1)*inverse_mod(d*(X)^2-1,p)%p
sage: Y

4097294349129061626216953635182512769012007176856180609903321124717525537317

/// It needs to be checked if the Y here is a quadratic residue in p,
/// using the legendre symbol [http://people.bath.ac.uk/masgks/XX10190/legendresymbol.pdf],
/// if confirmed as QR in p, then tonelli-shanks is used to find the corresponing Y coordinates.

sage: legendre_symbol(Y,p)
1
sage:         z += 1
....:     c = pow(z, q, p)
....:
....:     # Search for a solution
....:     x = pow(a, (q + 1)/2, p)
....:     t = pow(a, q, p)
....:     m = s
....:     while t != 1:
....:         # Find the lowest i such that t^(2^i) = 1
....:         i, e = 0, 2
....:         for i in xrange(1, m):
....:             if pow(t, e, p) == 1:
....:                 break
....:             e *= 2
....:
....:         # Update next value to iterate
....:         b = pow(c, 2**(m - i - 1), p)
....:         x = (x * b) % p
....:         t = (t * b * b) % p
....:         c = (b * b) % p
....:         m = i
....:
....:     return [x, p-x]
....:
sage: prime_mod_sqrt(Y,p)
[7027685437011822135117075804201712829494335458984232261155589991678118276875,
 209320140320440078856110758841281411362780900395675344846360946607335974114]

/// Using formulae from (http://eprint.iacr.org/2008/522), Section 3.1., compute T.
/// Set initial Z = 1

Y = 209320140320440078856110758841281411362780900395675344846360946607335974114
sage: T = (X*Y)%p
sage: T
2930481964486161103985550623777939759078932605539454827849053252502703637596
sage: print X, Y, T, Z 
14,
209320140320440078856110758841281411362780900395675344846360946607335974114,
2930481964486161103985550623777939759078932605539454827849053252502703637596,
1

///Using formulae from (http://eprint.iacr.org/2008/522), Section 3.1.
/// We can perform addition for twisted edwards on two points computed
/// using the aforementioned method. Addition requires two points, P and Q.

X3 = (X1Y2 + Y1X2)(Z1Z2 − d*T1T2),
Y3 = (Y1Y2 − a*X1X2)(T1T2 + d*T1T2),
T3 = (Y1Y2 − a*X1X2)(X1Y2 + Y1X2),
Z3 = (Z1Z2 − d*T1T2)(Z1Z2 + d*T1T2)
///all of the above operations are to be performed in modp

/// Define the above calculated variables as follows: X = X1 : Y = Y1 : T = T1 : Z = Z1
sage: print X1, Y1, T1, Z1
14,
209320140320440078856110758841281411362780900395675344846360946607335974114,
2930481964486161103985550623777939759078932605539454827849053252502703637596,
1

/// In order to show a complete Edwards addition in Twisted extended coordinates,
/// a second point must be computed. 
/// Take an arbitrary X as 67 and perform the same process. 

sage: X = 67
sage: Y = (-(X)^2-1)*inverse_mod(d*(X)^2-1,p)%p
sage: Y
2083393178995948293615321623635643301289972308686668478963476666090583806680
sage: legendre_symbol(Y,p)
1
sage: prime_mod_sqrt(Y,p)
[3941153185566030503197827307080909868202351422646487319508322021660996132587,
3295852391766231710775359255962084372654764936733420286493628916624458118402]
Y = 32958523917662317107753592559620843726547649367334202
sage: Z = 1
sage: T = X*Y%p 
sage: T
3711942928369658202753473258169825742155759979741931015014609265275066403264
/// /// Define the above calculated variables as follows: X = X2 : Y = Y2 : T = T2 : Z = Z2
sage: print X2, Y2, T2, Z2
67, 
3295852391766231710775359255962084372654764936733420286493628916624458118402, 
3711942928369658202753473258169825742155759979741931015014609265275066403264, 
1

sage: print a,d  
-1, 951605751702391019481481818669129158712512026257330939079110344917983315091

sage: print p
7237005577332262213973186563042994240857116359379907606001950938285454250989

sage: X3 = ((X1*Y2+Y1*X2)*(Z1*Z2-d*T1*T2))%p
sage: Y3 = ((Y1*Y2-a*X1*X2)*(Z1*Z2+d*T1*T2))%p
sage: t3 = ((Y1*Y2-a*X1*X2)*(X1*Y2+Y1*X2))%p
sage: z3 = ((Z1*Z2-d*T1*T2)*(Z1*Z2+d*T1*T2))%p
sage: print X3, Y3, T3, Z3
6071577539228590191219387911031602982956051495655581694654126271979753651722,
837202702872841412924343780706778248153230580612427863707303374823451692769,
3870569102798123767101920828945730089305537575358572428982223506408632563886,
5030678076965133398451320860257582818948884882165145613987735041289292101393

///Using formulae from (http://eprint.iacr.org/2008/522), Section 3.1.
/// We can perform doubling for twisted edwards on two points computed
/// using the aforementioned method. Doubling requires only one point, P.

X3 = 2X1Y1(2*Z1^2-Y1^2-a*X1^2)
Y3 = (Y1^2+a*X1^2)(Y1^2-a*X1^2)
T3 = 2X1Y1(Y1^2-a*X1^2)
Z3 = (Y1^2+a*X1^2)(2*Z1^2-Y1^2-a*X1^2)

sage: print X1, Y1, T1, Z1
sage: print X1, Y1, T1, Z1
14,
209320140320440078856110758841281411362780900395675344846360946607335974114,
2930481964486161103985550623777939759078932605539454827849053252502703637596,
1
sage: print a,d  
-1, 951605751702391019481481818669129158712512026257330939079110344917983315091
sage: print p
7237005577332262213973186563042994240857116359379907606001950938285454250989
 
sage: X3 = (2*X1*Y1)*(2*z1^2-Y1^2-a*X1^2)%p
sage: Y3 = (Y1^2+a*X1^2)*(Y1^2-a*X1^2)%p
sage: T3 = ((2*X1*Y1)*(Y1^2-a*X1^2))%p
sage: z3 = (Y1^2+a*X1^2)*(2*z1^2-Y1^2-a*X1^2)%p
sage: print X3, Y3, t3, z3
149787030802898863214220589614787467360377956858885734134859441157998105502,
4114181249139963708922561672280278463269518807069632207462778037420327721750,
465221815300404819953157336686579853418396566040992296296754217912562254655,
3604554139948105518509753594085031057181477091926039562012636801913890184366




/// For scalar multiplication, where the input is a random chosen
/// scalar - denoted by k. A random point P is computed k times,
/// to achieve a new output. First define constants and algorithm
/// then perform computation and check.

sage: x = 2^252 + 27742317777372353535851937790883648493
sage: F = GF(x)
sage: E = EllipticCurve(F,[0,505186,0,1,0])
sage: def mult(P,k):
....:         if k == 0:
....:              return E(0)
....:          elif k%2 ==1:
....:             return P + mult(P+P,k//2)
....:          else:
....:             return mult(P+P,k//2)
....:    
sage: P = E.random_element();P
5051189995337479708433119006747039364870785988521470496097671181243562411695,
7155958472685660389975401207154951743382380416674787893210035445445872196541,
1
sage: mult(P,8)
1868330701290932041393248498391407583880515981499204757603220260047257156875,
5999066270237031196158421153363394298942525294456370395071609058345162660448,
1
sage: 8*P
1868330701290932041393248498391407583880515981499204757603220260047257156875,
5999066270237031196158421153363394298942525294456370395071609058345162660448,
1

